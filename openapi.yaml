openapi: 3.0.3
info:
  title: Email Verifier API
  description: |
    A microservice to validate email addresses, designed to be fast, reliable, and cost-effective.
  version: 1.0.0
servers:
  - url: http://localhost:3000
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
  schemas:
    EmailValidationBody:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
          example: 'user@example.com'
    BulkValidationBody:
      type: object
      required: [emails]
      properties:
        emails:
          type: array
          items:
            type: string
            format: email
          minItems: 1
          maxItems: 5000
          example:
            ['user1@example.com', 'disposable@yopmail.com', 'invalid-email']
    SmtpResult:
      type: object
      properties:
        enabled:
          type: boolean
        connection:
          type: string
          enum: [ok, timeout, blocked, error, not_checked]
        deliverable:
          type: boolean
        catch_all_suspected:
          type: boolean
        notes:
          type: string
    ValidationResult:
      type: object
      properties:
        email: { type: string }
        normalized: { type: string }
        valid_syntax: { type: boolean }
        domain_exists: { type: boolean }
        has_mx: { type: boolean }
        is_disposable: { type: boolean }
        is_role: { type: boolean }
        smtp:
          $ref: '#/components/schemas/SmtpResult'
        score:
          type: number
          format: float
          minimum: 0
          maximum: 1
        status:
          type: string
          enum: [deliverable, risky, undeliverable, unknown]
        reasons:
          type: array
          items:
            type: string
        checked_at:
          type: string
          format: date-time
        ttl_seconds:
          type: integer
    ErrorResponse:
      type: object
      properties:
        error: { type: string }
        details: { type: object }
security:
  - ApiKeyAuth: []
paths:
  /validate:
    post:
      summary: Validate a single email address
      tags: [Validation]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailValidationBody'
      responses:
        '200':
          description: Successful validation result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResult'
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '429': { description: Too Many Requests }
  /bulk/validate:
    post:
      summary: Validate a batch of email addresses
      tags: [Validation]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkValidationBody'
      responses:
        '200':
          description: An array of validation results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ValidationResult'
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '429': { description: Too Many Requests }
  /healthz:
    get:
      summary: Health Check
      tags: [Monitoring]
      responses:
        '200': { description: Service is healthy }
  /readyz:
    get:
      summary: Readiness Check
      tags: [Monitoring]
      responses:
        '200': { description: Service is ready }
        '503': { description: Service not ready }
  /metrics:
    get:
      summary: Prometheus Metrics
      tags: [Monitoring]
      responses:
        '200': { description: Prometheus-formatted metrics }
  /unsubscribe:
    post:
      summary: Unsubscribe an email address (Placeholder)
      tags: [Suppression]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '202': { description: Request accepted }
